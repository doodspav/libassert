cmake_minimum_required(VERSION 3.14)

include(cmake/PreventInSourceBuilds.cmake)


# ---- Initialize Project ----

# used to support find_package
set(package_name "assert")

# create base project
project(
    libassert
    VERSION 1.2.1
    DESCRIPTION "The most over-engineered C++ assertion library"
    HOMEPAGE_URL "https://github.com/jeremy-rifkin/libassert"
    LANGUAGES CXX
)

# don't change include order, OptionVariables checks if project is top level
include(cmake/ProjectIsTopLevel.cmake)
include(cmake/OptionVariables.cmake)


# ---- Project Dependencies ----

# obtain cpptrace
if(ASSERT_USE_EXTERNAL_CPPTRACE)
  find_package(cpptrace REQUIRED)
else()
  include(FetchContent)
  FetchContent_Declare(
      cpptrace
      GIT_REPOSITORY https://github.com/jeremy-rifkin/cpptrace.git
      GIT_TAG        v0.2.1
  )
  FetchContent_MakeAvailable(cpptrace)
endif()

# cpptrace potentially does not have an alias target
if(NOT TARGET cpptrace::cpptrace)
    add_library(cpptrace::cpptrace ALIAS cpptrace)
endif()


# ---- Declare Library ----

# target that we can modify (can't modify ALIAS targets)
# target name should not be the same as ${PROJECT_NAME}, causes add_subdirectory issues
set(target_name "libassert-lib")
add_library(${target_name} ${build_type})

# alias to cause error at configuration time instead of link time if target is missing
add_library(assert::assert ALIAS ${target_name})

# add /include files to target
# this is solely for IDE benefit, doesn't affect building, so unconditionally list magic_enum
target_sources(
    ${target_name} PRIVATE
    # include
    include/assert.hpp
    # third_party
    include/assert/third_party/magic_enum.hpp
)

# add /src files to target
target_sources(
    ${target_name} PRIVATE
    # src
    src/assert.cpp
)

# link dependencies
target_link_libraries(
    ${target_name} PRIVATE
    cpptrace::cpptrace
)


# ---- Generate Build Info Headers ----

# used in export header generated below
if(NOT ASSERT_BUILD_SHARED)
    target_compile_definitions(${target_name} PUBLIC ASSERT_STATIC_DEFINE)
endif()

# generate header file with export macros prefixed with BASE_NAME
include(GenerateExportHeader)
generate_export_header(
    ${target_name}
    BASE_NAME assert
    EXPORT_FILE_NAME include/assert/assert_export.hpp
)


# ---- Library Properties ----

# hide all symbols by default
# use SameMajorVersion versioning for shared library runtime linker lookup
set_target_properties(
    ${target_name} PROPERTIES
    CXX_VISIBILITY_PRESET hidden
    VISIBILITY_INLINES_HIDDEN YES
    VERSION "${PROJECT_VERSION}"
    SOVERSION "${PROJECT_VERSION_MAJOR}"
    EXPORT_NAME "assert"
    OUTPUT_NAME "assert"
)

# header files generated by CMake
target_include_directories(
    ${target_name} SYSTEM PUBLIC
    "$<BUILD_INTERFACE:${PROJECT_BINARY_DIR}/include>"
)

# header files from /include
target_include_directories(
    ${target_name} ${warning_guard} PUBLIC
    "$<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>"
)

# require C++17 support
target_compile_features(
    ${target_name}
    PUBLIC cxx_std_17
)

# add pre-processor definitions corresponding to CMake options
target_compile_definitions(
    ${target_name} PUBLIC
    $<$<BOOL:"${ASSERT_USE_MAGIC_ENUM}">:ASSERT_USE_MAGIC_ENUM>
)


# ---- Install Rules ----

if(NOT CMAKE_SKIP_INSTALL_RULES)
    include(cmake/InstallRules.cmake)
endif()


# ---- Setup Tests ----

if(ASSERT_BUILD_TESTING)

    # need to enable testing in case BUILD_TESTING is disabled
    # ctest expects that the top level project enables testing
    if(PROJECT_IS_TOP_LEVEL)
        enable_testing()
    endif()

    # tell unit tests where our files are
    set(ASSERT_BINARY_DIR "${PROJECT_BINARY_DIR}")
    set(ASSERT_SOURCE_DIR "${PROJECT_SOURCE_DIR}")

    # include test project
    # add_subdirectory(tests)
    include(tests/CMakeLists.txt)

endif()
